const { InstanceBase, InstanceStatus, TCPHelper, UDPHelper, runEntrypoint } = require('@companion-module/base')
const ping = require('ping')
const actions = require('./actions')
const presets = require('./presets')

class novastarInstance extends InstanceBase {
	constructor(internal) {
		super(internal)

		Object.assign(this, {
			...actions,
		})

		// D Series Display Modes
		this.CHOICES_BLACK = [
			{
				id: '0',
				label: 'No fade to black',
				cmd: Buffer.from([
					0x55, 0xaa, 0x00, 0xaf, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x00,
					0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x5b, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22,
					0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x46, 0x54, 0x42,
					0x22, 0x3a, 0x7b, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x74, 0x69, 0x6d,
					0x65, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22,
					0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
					0x34, 0x2c, 0x22, 0x46, 0x54, 0x42, 0x22, 0x3a, 0x7b, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a,
					0x30, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x5d, 0x7a, 0x7d,
				]),
			},
			{
				id: '1',
				label: 'Fade to black',
				cmd: Buffer.from([
					0x55, 0xaa, 0x00, 0x92, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x00,
					0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x5b, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22,
					0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x46, 0x54, 0x42,
					0x22, 0x3a, 0x7b, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x6d,
					0x65, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22,
					0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
					0x34, 0x2c, 0x22, 0x46, 0x54, 0x42, 0x22, 0x3a, 0x7b, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a,
					0x31, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x5d, 0x5f, 0x7d,
				]),
			},
		]
		this.CHOICES_FREEZE = [
			{
				id: '0',
				label: 'Unfreeze',
				cmd: Buffer.from([
					0x55, 0xaa, 0x00, 0xe5, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00,
					0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x5b, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22,
					0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x66, 0x72, 0x65,
					0x65, 0x7a, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64,
					0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
					0x3a, 0x34, 0x2c, 0x22, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0xae, 0x73,
				]),
			},
			{
				id: '1',
				label: 'Freeze',
				cmd: Buffer.from([
					0x55, 0xaa, 0x00, 0xca, 0xfe, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x69, 0x00,
					0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x5b, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22,
					0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x66, 0x72, 0x65,
					0x65, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64,
					0x22, 0x3a, 0x32, 0x35, 0x35, 0x2c, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
					0x3a, 0x34, 0x2c, 0x22, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x7d, 0x5d, 0xf2, 0x73,
				]),
			},
		]

		this.CONFIG_MODEL = {
			d12: { id: 'd12', label: 'D12', black: this.CHOICES_BLACK, freeze: this.CHOICES_FREEZE },
		}

		this.CHOICES_MODEL = Object.values(this.CONFIG_MODEL)
		// Sort alphabetical
		this.CHOICES_MODEL.sort(function (a, b) {
			var x = a.label.toLowerCase()
			var y = b.label.toLowerCase()
			if (x < y) {
				return -1
			}
			if (x > y) {
				return 1
			}
			return 0
		})

		this.lastState = 0 // used for ping checking, init to ok(0)
	}

	updateActions() {
		this.log('debug', 'update actions....')
		this.setActionDefinitions(actions.getActions(this))
	}

	// Return config fields for web config
	getConfigFields() {
		this.log('getting the fields....')
		return [
			{
				type: 'static-text',
				id: 'info',
				width: 12,
				label: 'Information',
				value: 'This module will allow you to control the following novastar products: D12.',
			},
			{
				type: 'textinput',
				id: 'host',
				label: 'IP Address',
				width: 6,
				default: '192.168.0.10',
				regex: this.REGEX_IP,
			},
			{
				type: 'dropdown',
				id: 'modelID',
				label: 'Model',
				width: 6,
				choices: this.CHOICES_MODEL,
				default: 'd12',
			},
		]
	}

	// When module gets deleted
	async destroy() {
		if (this.socket !== undefined) {
			this.socket.destroy()
		}
		if (this.udp !== undefined) {
			this.udp.destroy()
		}
		if (this.heartbeat) {
			clearInterval(this.heartbeat)
			delete this.heartbeat
		}
		this.log('destroy', this.id)
	}

	//update device status
	updateDeviceStatus(isAlive) {
		// this.log('debug', 'ping test:' + isAlive +", lastState:"+this.lastState)
		if (isAlive == true) {
			// this.log('debug', 'ping check ok.')
			if (this.lastState !== 0) {
				// this.log('info', 'connection recover, try to reconnect device.')
				this.updateStatus(InstanceStatus.Connecting)
				//try to reconnect
				this.initUDP()
				this.initTCP()
				this.lastState = 0
			}
		} else {
			if (isAlive == false && this.lastState === 0) {
				this.updateStatus(InstanceStatus.ConnectionFailure)
				this.log('info', 'ping check failure.')
				this.lastState = 1
			}
		}
	}
	pingTest() {
		ping.sys.probe(this.config.host, (isAlive) => this.updateDeviceStatus(isAlive), { timeout: 1 })
	}

	async init(config) {
		this.log('debug', 'init module config....')
		this.config = config

		if (this.config.modelID !== undefined) {
			this.model = this.CONFIG_MODEL[this.config.modelID]
		} else {
			this.config.modelID = 'd12'
			this.model = this.CONFIG_MODEL['d12']
		}

		this.updateActions()
		
		this.updateStatus(InstanceStatus.Connecting)
		this.initUDP()
		this.initTCP()

		this.setPresetDefinitions(presets.getPresetDefinitions(this))

		this.heartbeat = setInterval(() => this.pingTest(), 10000) //check every 10s
	}

	initTCP() {
		if (this.socket !== undefined) {
			this.socket.destroy()
			delete this.socket
		}

		if (this.config.port === undefined) {
			this.config.port = 5400
		}

		if (this.config.host) {
			this.socket = new TCPHelper(this.config.host, this.config.port)

			this.socket.on('status_change', (status, message) => {
				this.updateStatus(status, message)
			})

			this.socket.on('error', (err) => {
				this.updateStatus(InstanceStatus.ConnectionFailure)
				this.log('error', 'Network error: ' + err.message)
				console.log('TCP Connection error, Try to reconnect.')
				this.updateStatus(InstanceStatus.Connecting)
				if (this.udp !== undefined) {
					let cmd_connect = Buffer.from([
						0x72, 0x65, 0x71, 0x4e, 0x4f, 0x56, 0x41, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x3a, 0x00,
						0x00, 0x03, 0xfe, 0xff,
					]) // Port FFFE
					this.udp.send(cmd_connect)
				} else {
					this.initUDP()
				}
			})

			this.socket.on('connect', () => {
				let cmd = Buffer.from([
					0x55, 0xaa, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
					0x57, 0x56,
				])
				this.socket.send(cmd)
				this.log('debug', 'Connected')
				this.updateStatus(InstanceStatus.Ok)
			})

			// if we get any data, display it to stdout
			this.socket.on('data', (buffer) => {
				//future feedback can be added here
				// this.log('debug', 'Tcp recv:' + buffer);
			})
		} else {
			this.log('error', 'No host configured')
			this.updateStatus(InstanceStatus.BadConfig)
		}
	}

	initUDP() {
		if (this.udp !== undefined) {
			this.udp.destroy()
			delete this.udp
		}

		if (this.config.host !== undefined) {
			this.udp = new UDPHelper(this.config.host, 3800)

			this.udp.on('error', (err) => {
				this.debug('Network error', err)
				this.log('error', 'Network error: ' + err.message)
				this.updateStatus(InstanceStatus.ConnectionFailure)
			})

			// If we get data, thing should be good
			this.udp.on('data', () => {
				// this.status(this.STATE_WARNING, 'Connecting...')
			})

			this.udp.on('status_change', (status, message) => {
				this.log('debug', 'UDP status_change: ' + status)
			})
			this.log('debug', 'initUDP finish')
		} else {
			this.log('error', 'No host configured')
			this.updateStatus(InstanceStatus.BadConfig)
		}

		if (this.udp !== undefined) {
			let cmd_register = Buffer.from([
				0x72, 0x65, 0x71, 0x4e, 0x4f, 0x56, 0x41, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x3a, 0x00,
				0x00, 0x03, 0xfe, 0xff,
			])
			this.udp.send(cmd_register)
			this.log('info', 'UDP registration.')
		}
	}

	configUpdated(config) {
		var resetConnection = false

		if (this.config.host !== config.host) {
			resetConnection = true
		}

		this.config = config

		this.log('info', 'configUpdated module....')

		if (resetConnection === true || this.socket === undefined) {
			this.updateStatus(InstanceStatus.Connecting)
			this.initUDP()
			this.initTCP()
		}
	}
}

runEntrypoint(novastarInstance, [])
